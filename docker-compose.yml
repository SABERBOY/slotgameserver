version: '3.8'

services:
  # PostgreSQL数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: saber_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: saber_game
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - saber_network

  # Saber游戏服务器
  saber:
    build:
      context: .
      dockerfile: Dockerfile
    image: saber:latest
    container_name: saber_game_server
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/saber_game
      RUST_LOG: ${RUST_LOG:-info}
      SERVER_HOST: ${SERVER_HOST:-0.0.0.0}
      SERVER_PORT: ${SERVER_PORT:-8000}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - saber_network
    volumes:
      - ./logs:/app/logs
    command: ["./saber"]

  # Redis缓存服务（可选，用于会话管理和缓存）
  redis:
    image: redis:7-alpine
    container_name: saber_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - saber_network
    command: redis-server --appendonly yes

  # Nginx反向代理（可选，用于生产环境）
  nginx:
    image: nginx:alpine
    container_name: saber_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - saber
    networks:
      - saber_network
    profiles:
      - production

# 网络配置
networks:
  saber_network:
    driver: bridge

# 数据卷配置
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local